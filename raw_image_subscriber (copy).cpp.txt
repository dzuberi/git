#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <ros/types.h>
#include <cv_bridge/cv_bridge.h>
#include <string>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
using namespace std;
int framecount = 0;

void imageCallback(const sensor_msgs::ImageConstPtr& msg)
{
	cv_bridge::CvImagePtr cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
	//image = *msg;
	//int image_height = (int) image.height;
	//int ima  ge_width = (int) image.width;
	//int step = (int) image.step;
	//ROS_INFO("h:%i\nw:%i\nstep:%i",image_height,image_width,step);
	//string image_encodings = image.encoding;
	//ROS_INFO("%s",image_encodings);
	//cv::namedWindow("Display window");
	//cv::imshow("Display window",cv_ptr->image);
	ros::Time begin = ros::Time::now();	
	int tnano = begin.nsec;
	int tsec = begin.sec;
	//float tmilif = tnano * 1e-6;
	//int tmili = tmilif;
	string framename = "/home/nvidia/frames/" + to_string(tsec)+ "_" + to_string(tnano) + ".jpg";
	//sensor_msgs::Image image;
	//cv::imwrite("~/frames/image.jpg",cv_ptr->image);
	cv::imwrite(framename,cv_ptr->image);
	//ROS_INFO("%i %i %s",tnano, tsec, &framename);
	ROS_INFO("%i %i",tnano, tsec);
}

int main(int argc, char **argv)
{
	ros::Time::init();
	ros::init(argc, argv, "image_listener");
	ros::NodeHandle nh;
	image_transport::ImageTransport it(nh);
	image_transport::Subscriber sub = it.subscribe("/pg_12280229/image_raw",1000,imageCallback);
	ros::spin();
}
